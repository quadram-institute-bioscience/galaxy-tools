<tool id="flye" name="Flye assembler" version="@TOOL_VERSION@+galaxy@SUFFIX_VERSION@" profile="20.01">
    <description>of long and error-prone reads</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam_ontology"/>
    <expand macro="requirements" />
    <version_command>flye --version</version_command>
    <command detect_errors="exit_code"><![CDATA[
        #if $input.is_of_type('fastqsanger', 'fastq'):
            #set $ext = 'fastq'
        #elif $input.is_of_type('fastqsanger.gz'):
            #set $ext = 'fastq.gz'
        #elif $input.is_of_type('fastq'):
            #set $ext = 'fastq'
        #elif $input.is_of_type('fastq.gz'):
            #set $ext = 'fastq.gz'
        #elif $input.is_of_type('fasta.gz'):
            #set $ext = 'fasta.gz'
        #elif $input.is_of_type('fasta'):
            #set $ext = 'fasta'
        #end if
        ln -s '$input' ./input.${ext} &&

        flye
        $mode
        ./input.${ext}
        -o out_dir
        -t \${GALAXY_SLOTS:-4}
        -i $iterations
        #if $mode_conditional.mode == '--pacbio-hifi' and $mode_conditional.hifi_error:
            --hifi-error $mode_conditional.hifi_error
        #end if
        #if $min_overlap:
            -m $min_overlap
        #end if
        #if $asm.asm_select == 'true':
            --asm-coverage $asm.asm_coverage
            -g '${asm.genome_size}'
        #end if
        $meta
        $scaffold
        $no_alt_contigs
    2>&1
    ]]>    </command>
    <inputs>
        <param name="input" type="data" format="fasta,fasta.gz,fastq,fastq.gz,fastqsanger.gz,fastqsanger" multiple="false" label="Input reads">
            <help><![CDATA[
    Input reads could be in FASTA or FASTQ format, uncompressed
    or compressed with gz. Currenlty, raw and corrected reads
    from PacBio and ONT are supported. The expected error rates are
    <30% for raw and <2% for corrected reads. Additionally,
    --subassemblies option performs a consensus assembly of multiple
    sets of high-quality contigs. You may specify multiple
    files with reads (separated by spaces). Mixing different read
    types is not yet supported.
     ]]> </help>
        </param>
        <conditional name="mode_conditional">
            <param name="mode" type="select" label="Mode">
                <option value="--nano-hq">Nanopore HQ (--nano-hq)</option>
                <option value="--nano-raw">Nanopore raw (--nano-raw)</option>
                <option value="--nano-corr">Nanopore corrected (--nano-corr)</option>
                <option value="--pacbio-raw">PacBio raw (--pacbio-raw)</option>
                <option value="--pacbio-corr">PacBio corrected (--pacbio-corr)</option>
                <option value="--pacbio-hifi">PacBio HiFi (--pacbio-hifi)</option>
            </param>
            <when value="--nano-raw"/>
            <when value="--nano-corr"/>
            <when value="--nano-hq"/>
            <when value="--pacbio-raw"/>
            <when value="--pacbio-corr"/>
            <when value="--pacbio-hifi">
                <param argument="--hifi-error" type="float" min="0" max="1" optional="true" label="Expected HiFi reads error rate" help="Default: 0.01"/>
            </when>
        </conditional>
       <param argument="--iterations" type="integer" value="1" label="Number of polishing iterations" 
            help="Polishing is performed as the final assembly stage. By default, Flye runs one polishing iteration. Additional iterations 
                might correct a small number of extra errors (due to improvements on how reads may align to the corrected assembly). If the 
                parameter is set to 0, the polishing is not performed"/>
        <param argument="--min-overlap" type="integer" min="1000" max="10000" optional="true" label="Minimum overlap between reads" 
            help="This sets a minimum overlap length for two reads to be considered overlapping. By default it is chosen 
                automatically based on the read length distribution (reads N90) and does not require manual setting. Typical 
                value is 3k-5k (and down to 1k for datasets with shorter read length). Intuitively, we want to set this 
                parameter as high as possible, so the repeat graph is less tangled. However, higher values might lead to assembly gaps.
                In some rare cases it makes sense to manually increase minimum overlap for assemblies of big genomes with long reads and high coverage." />
        <param argument="--keep-haplotypes" type="boolean" truevalue="--keep-haplotypes" falsevalue="" checked="False" label="Keep haplotypes"
            help="By default, Flye collapses graph structures caused by alternative haplotypes (bubbles, superbubbles, roundabouts) to produce longer 
                consensus contigs. This option retains the alternative paths on the graph, producing less contigouos, but more detailed assembly."/>
        <param argument="--scaffold" type="boolean" truevalue="--scaffold" falsevalue="" label="Enable scaffolding using graph" 
            help="Starting from the version 2.9 Flye does not perform scaffolding by default, which guarantees that all assembled sequences do not have any gaps" />
        <param argument="--meta" type="boolean" truevalue="--meta" falsevalue="" checked="False" label="Perform metagenomic assembly" 
            help="It is designed for highly non-uniform coverage and is sensitive to underrepresented sequence at low coverage (as low as 2x).
                In some examples of simple metagenomes, we observed that the normal mode assembled more contigious bacterial 
                consensus sequence, while the metagenome mode was slightly more fragmented, but revealed strain mixtures"/>
        <conditional name="asm">
            <param name="asm_select" type="select" label="Reduced contig assembly coverage" help="Typically, assemblies of large genomes at high coverage require a hundreds of RAM. For high coverage assemblies, 
                        you can reduce memory usage by using only a subset of longest reads for initial contig extension stage (usually, the memory bottleneck)">
                <option value="true">Enable reduced coverage for initial disjointing assembly</option>
                <option value="false" selected="true">Disable reduced coverage for initial disjointing assembly</option>
            </param>
            <when value="true">
                <param argument="--asm-coverage" type="integer" min="0" value="30"
                    label="Reduced coverage for initial disjointing assembly" 
                    help="This parameter specifies the target coverage of the longest reads. For a typical assembly, 30x is enough to produce good 
                        initial contigs. Regardless of this parameter, all reads will be used at the later pipeline stages."/>
                <param argument="--genome-size" type="text" optional="true" label="Estimated genome size"
                    help="For example, 5m or 2.6g. No longer required as input. However, it must be used in conjunction with --asm-coverage option.">
                    <validator type="regex" message="Genome size must be a float  or integer, optionally followed by the a unit prefix (kmg)">^([0-9]*[.])?[0-9]+[kmg]?$</validator>
                </param>
            </when>
            <when value="false" />
        </conditional>
        <param argument="--no-alt-contigs" type="boolean" truevalue="--no-alt-contigs" falsevalue="" checked="false" label="Remove all non-primary contigs from the assembly"/>
    </inputs>
    <outputs>
        <data name="consensus" format="fasta" from_work_dir="out_dir/assembly.fasta" label="${tool.name} on ${on_string} (scaffolds)"/>
        <data name="assembly_info" format="tabular" from_work_dir="out_dir/assembly_info.txt" label="${tool.name} on ${on_string} (assembly_info)"/>
        <data name="assembly_graph" format="graph_dot" from_work_dir="out_dir/assembly_graph.gv" label="${tool.name} on ${on_string} (assembly_graph)"/>
        <data name="assembly_gfa" format="txt" from_work_dir="out_dir/assembly_graph.gfa" label="${tool.name} on ${on_string} (Graphical Fragment Assembly)"/>
        <data name="flye_log" format="txt" from_work_dir="out_dir/flye.log" label="${tool.name} on ${on_string} (log)"/>
    </outputs>
    <tests>
    <!--Test 01: pacbio-raw-->
        <test expect_num_outputs="5">
            <param name="inputs" ftype="fastq.gz" value="ecoli_01.fastq.gz,ecoli_02.fastq.gz,ecoli_03.fastq.gz,ecoli_04.fastq.gz,ecoli_05.fastq.gz,ecoli_06.fastq.gz,ecoli_07.fastq.gz"/>
            <param name="mode" value="--pacbio-raw"/>
            <param name="iterations" value="0"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_text text="*,1,3,*"/>
                </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="15" delta="1"/>
                </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <not_has_text text=">contig_2"/>
                </assert_contents>
            </output>
            <output name="flye_log" ftype="txt">
                <assert_contents>
                    <has_text text="7249289"/>
                    <has_text text="11150"/>
                    <has_text text="Generated 3 contigs"/>
                    <has_n_lines n="506" delta="10"/>
                </assert_contents>
            </output>
        </test>
        <!--Test 02: nano raw-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fasta.gz" value="nanopore.fasta.gz"/>
            <param name="mode" value="--nano-raw"/>
            <param name="iterations" value="0"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_text text="21816"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_text text="31x"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text text="RC:i:46"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_line line=">contig_2"/>
                    <not_has_text text=">contig_4"/>
               </assert_contents>
            </output>
        </test>
      <!-- Test 03: reduce coverage -->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_hifi_01.fastq.gz,ecoli_hifi_02.fastq.gz,ecoli_hifi_03.fastq.gz,ecoli_hifi_04.fastq.gz,ecoli_hifi_05.fastq.gz,ecoli_hifi_06.fastq.gz,ecoli_hifi_07.fastq.gz,ecoli_hifi_08.fastq.gz,ecoli_hifi_09.fastq.gz"/>
            <conditional name="mode_conditional">
                <param name="mode" value="--nano-raw"/>
            </conditional>
            <conditional name="asm">
                <param name="asm_select" value="true" />
                <param name="asm" value="30"/>
                <param name="genome_size" value="3980000"/>
            </conditional>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="7" delta="1"/>
                    <not_has_text text="contig_7"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="40" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="S\tedge\_1"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="427580" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 04: metagenomic mode-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_01.fastq.gz,ecoli_02.fastq.gz,ecoli_03.fastq.gz,ecoli_04.fastq.gz,ecoli_05.fastq.gz,ecoli_06.fastq.gz,ecoli_07.fastq.gz"/>
            <conditional name="mode_conditional">
                <param name="mode" value="--pacbio-raw"/>
            </conditional>
            <param name="meta" value="true"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_text text="418681"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="10" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text text="dp:i:17"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="425667" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 05: nanopore HQ mode-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_hifi_01.fastq.gz,ecoli_hifi_02.fastq.gz,ecoli_hifi_03.fastq.gz,ecoli_hifi_04.fastq.gz,ecoli_hifi_05.fastq.gz,ecoli_hifi_06.fastq.gz,ecoli_hifi_07.fastq.gz,ecoli_hifi_08.fastq.gz,ecoli_hifi_09.fastq.gz"/>
            <conditional name="mode_conditional">
                <param name="mode" value="--nano-hq"/>
            </conditional>
            <param name="min_overlap" value="1000"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <not_has_text text="contig_5"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="28" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="P\tcontig\_4"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="427129" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 06: hifi error option-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_hifi_01.fastq.gz,ecoli_hifi_02.fastq.gz,ecoli_hifi_03.fastq.gz,ecoli_hifi_04.fastq.gz,ecoli_hifi_05.fastq.gz,ecoli_hifi_06.fastq.gz,ecoli_hifi_07.fastq.gz,ecoli_hifi_08.fastq.gz,ecoli_hifi_09.fastq.gz"/>
            <conditional name="mode_conditional">
                <param name="mode" value="--pacbio-hifi"/>
                <param name="hifi_error" value="0.21"/> 
            </conditional>
            <param name="min_overlap" value="1000"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="6" delta="1"/>
                    <not_has_text text="contig_7"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="28" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="P\s+contig_4"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="427129" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 07: keep haplotypes-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_hifi_01.fastq.gz,ecoli_hifi_02.fastq.gz,ecoli_hifi_03.fastq.gz,ecoli_hifi_04.fastq.gz,ecoli_hifi_05.fastq.gz,ecoli_hifi_06.fastq.gz,ecoli_hifi_07.fastq.gz,ecoli_hifi_08.fastq.gz,ecoli_hifi_09.fastq.gz"/>
            <conditional name="mode_conditional">
                <param name="mode" value="--pacbio-corr"/>
                <param name="hifi_error" value="0.21"/>
            </conditional>
            <param name="min_overlap" value="1000"/>
            <param name="keep-haplotypes" value="true"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="4" delta="1"/>
                    <not_has_text text="contig_5"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="28" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="P\s+contig_2"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="427129" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 08: scaffolding mode-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fastq.gz" value="ecoli_hifi_01.fastq.gz,ecoli_hifi_02.fastq.gz,ecoli_hifi_03.fastq.gz,ecoli_hifi_04.fastq.gz,ecoli_hifi_05.fastq.gz,ecoli_hifi_06.fastq.gz,ecoli_hifi_07.fastq.gz,ecoli_hifi_08.fastq.gz,ecoli_hifi_09.fastq.gz"/>
            <param name="mode" value="--nano-hq"/>
            <param name="min_overlap" value="1000"/>
            <param name="scaffold" value="true"/>
             <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="4" delta="1"/>
                    <not_has_text text="contig_5"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="28" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="P\s+contig_2"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="427129" delta="100"/>
               </assert_contents>
            </output>
        </test>
        <!--Test 09: test not-alt-contigs parameter w-->
        <test expect_num_outputs="4">
            <param name="inputs" ftype="fasta.gz" value="nanopore.fasta.gz"/>
            <param name="mode" value="--nano-raw"/>
            <param name="iterations" value="0"/>
            <param name="no_alt_contigs" value="true"/>
            <output name="assembly_info" ftype="tabular">
                <assert_contents>
                    <has_n_lines n="2" delta="1"/>
                    <not_has_text text="contig_2"/>
               </assert_contents>
            </output>
            <output name="assembly_graph" ftype="graph_dot">
                <assert_contents>
                    <has_n_lines n="6" delta="1"/>
               </assert_contents>
            </output>
            <output name="assembly_gfa" ftype="txt">
                <assert_contents>
                    <has_text_matching expression="P\s+contig_1"/>
               </assert_contents>
            </output>
            <output name="consensus" ftype="fasta">
                <assert_contents>
                    <has_size value="5123" delta="100"/>
               </assert_contents>
            </output>
        </test>
    </tests>
    <help>
        <![CDATA[
    Flye output
    The main output files are:

    -   **assembly.fasta** - Final assembly. Contains contigs and possibly scaffolds (see below).

    -   **assembly_graph.{gfa|gv}** - Final repeat graph. Note that the edge sequences might be different (shorter) than contig sequences, because contigs might include multiple graph edges (see below).
    
    -   **assembly_info.txt** - Extra information about contigs (such as length or coverage).
    
    Each contig is formed by a single unique graph edge. If possible, unique contigs are extended with the sequence from flanking unresolved repeats on the graph. Thus, a contig fully contains the corresponding graph edge (with the same id), but might be longer then this edge. This is somewhat similar to unitig-contig relation in OLC assemblers. In a rare case when a repetitive graph edge is not covered by the set of "extended" contigs, it will be also output in the assembly file.

    Sometimes it is possible to further order contigs into scaffolds based on the repeat graph structure. These ordered contigs will be output as a part of scaffold in the assembly file (with a scaffold\_ prefix). Since it is hard to give a reliable estimate of the gap size, those gaps are represented with the default 100 Ns. assembly_info.txt file (below) contains additional information about how scaffolds were formed.

    Extra information about contigs/scaffolds is output into the assembly_info.txt file. It is a tab-delimited table with the columns as follows:

    -   Contig/scaffold id

    -   Length
    
    -   Coverage
    
    -   Is circular (representing circular sequence, such as bacterial chromosome or plasmid)
    
    -   Is repetitive (represents repeated, rather than unique sequence)
    
    -   Multiplicity (inferred multiplicity based on coverage)
    
    -   Graph path (repeat graph path corresponding to this contig/scaffold). Scaffold gaps are marked with ?? symbols, and * symbol denotes a terminal graph node.
    
    scaffolds.fasta file is a symlink to assembly.fasta, which is retained for the backward compatibility.
    ]]>
    </help>
    <expand macro="citations" />
</tool>
